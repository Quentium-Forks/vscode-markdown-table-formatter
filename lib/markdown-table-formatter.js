"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = require("vscode");
const table_formatter_1 = require("./table-formatter");
function activate(context) {
    const tableFormatter = new table_formatter_1.TableFormatter();
    const commandFormat = vscode.commands.registerTextEditorCommand("markdown-table-formatter.format", (editor, edit) => {
        const languageId = editor.document.languageId;
        const config = vscode.workspace.getConfiguration('markdown-table-formatter');
        const scopes = config.get('markdownGrammarScopes');
        if (scopes && scopes.includes(languageId)) {
            tableFormatter.format(editor, false);
        }
    });
    const commandEnable = vscode.commands.registerTextEditorCommand("markdown-table-formatter.enableForCurrentScope", (editor, edit) => {
        const config = vscode.workspace.getConfiguration('markdown-table-formatter');
        const scopes = config.get('markdownGrammarScopes');
        if (scopes) {
            scopes.add(editor.document.languageId);
        }
        config.update("markdownGrammarScopes", scopes, true);
        vscode.window.showInformationMessage(`Markdown table formatter enabled for '${editor.document.languageId}' language!`);
    });
    const formatOnSave = vscode.workspace.onWillSaveTextDocument((event) => {
        console.log(event.document.fileName);
        const edits = [];
        event.waitUntil(new Promise((resolve, reject) => {
            edits.push(vscode.TextEdit.insert(new vscode.Position(0, 0), `${event.document.uri}`));
            resolve(edits);
        }));
    });
    context.subscriptions.push(commandFormat);
    context.subscriptions.push(commandEnable);
    context.subscriptions.push(formatOnSave);
}
exports.activate = activate;
function deactivate() {
}
exports.deactivate = deactivate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24tdGFibGUtZm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21hcmtkb3duLXRhYmxlLWZvcm1hdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLGlDQUFpQztBQUNqQyx1REFBbUQ7QUFJbkQsa0JBQXlCLE9BQWdDO0lBQ3JELE1BQU0sY0FBYyxHQUFHLElBQUksZ0NBQWMsRUFBRSxDQUFDO0lBRTVDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUMsaUNBQWlDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDaEgsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDOUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQzdFLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQWMsdUJBQXVCLENBQUMsQ0FBQztRQUNoRSxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxnREFBZ0QsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUMvSCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDN0UsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBYyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ2hFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDVCxNQUFNLENBQUMsR0FBRyxDQUFTLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkQsQ0FBQztRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMseUNBQXlDLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxhQUFhLENBQUMsQ0FBQztJQUMzSCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNuRSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckMsTUFBTSxLQUFLLEdBQXNCLEVBQUUsQ0FBQztRQUVwQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksT0FBTyxDQUFvQixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUUvRCxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUV2RixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDMUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDMUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQXJDRCw0QkFxQ0M7QUFHRDtBQUNBLENBQUM7QUFERCxnQ0FDQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBtb2R1bGUgJ3ZzY29kZScgY29udGFpbnMgdGhlIFZTIENvZGUgZXh0ZW5zaWJpbGl0eSBBUElcclxuLy8gSW1wb3J0IHRoZSBtb2R1bGUgYW5kIHJlZmVyZW5jZSBpdCB3aXRoIHRoZSBhbGlhcyB2c2NvZGUgaW4geW91ciBjb2RlIGJlbG93XHJcbmltcG9ydCAqIGFzIHZzY29kZSBmcm9tICd2c2NvZGUnO1xyXG5pbXBvcnQgeyBUYWJsZUZvcm1hdHRlciB9IGZyb20gJy4vdGFibGUtZm9ybWF0dGVyJztcclxuXHJcbi8vIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHlvdXIgZXh0ZW5zaW9uIGlzIGFjdGl2YXRlZFxyXG4vLyB5b3VyIGV4dGVuc2lvbiBpcyBhY3RpdmF0ZWQgdGhlIHZlcnkgZmlyc3QgdGltZSB0aGUgY29tbWFuZCBpcyBleGVjdXRlZFxyXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUoY29udGV4dDogdnNjb2RlLkV4dGVuc2lvbkNvbnRleHQpIHtcclxuICAgIGNvbnN0IHRhYmxlRm9ybWF0dGVyID0gbmV3IFRhYmxlRm9ybWF0dGVyKCk7XHJcblxyXG4gICAgY29uc3QgY29tbWFuZEZvcm1hdCA9IHZzY29kZS5jb21tYW5kcy5yZWdpc3RlclRleHRFZGl0b3JDb21tYW5kKFwibWFya2Rvd24tdGFibGUtZm9ybWF0dGVyLmZvcm1hdFwiLCAoZWRpdG9yLCBlZGl0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgbGFuZ3VhZ2VJZCA9IGVkaXRvci5kb2N1bWVudC5sYW5ndWFnZUlkO1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHZzY29kZS53b3Jrc3BhY2UuZ2V0Q29uZmlndXJhdGlvbignbWFya2Rvd24tdGFibGUtZm9ybWF0dGVyJyk7XHJcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldDxTZXQ8c3RyaW5nPj4oJ21hcmtkb3duR3JhbW1hclNjb3BlcycpO1xyXG4gICAgICAgIGlmIChzY29wZXMgJiYgc2NvcGVzLmluY2x1ZGVzKGxhbmd1YWdlSWQpKSB7XHJcbiAgICAgICAgICAgIHRhYmxlRm9ybWF0dGVyLmZvcm1hdChlZGl0b3IsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBjb21tYW5kRW5hYmxlID0gdnNjb2RlLmNvbW1hbmRzLnJlZ2lzdGVyVGV4dEVkaXRvckNvbW1hbmQoXCJtYXJrZG93bi10YWJsZS1mb3JtYXR0ZXIuZW5hYmxlRm9yQ3VycmVudFNjb3BlXCIsIChlZGl0b3IsIGVkaXQpID0+IHtcclxuICAgICAgICBjb25zdCBjb25maWcgPSB2c2NvZGUud29ya3NwYWNlLmdldENvbmZpZ3VyYXRpb24oJ21hcmtkb3duLXRhYmxlLWZvcm1hdHRlcicpO1xyXG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXQ8U2V0PHN0cmluZz4+KCdtYXJrZG93bkdyYW1tYXJTY29wZXMnKTtcclxuICAgICAgICBpZiAoc2NvcGVzKSB7XHJcbiAgICAgICAgICAgIHNjb3Blcy5hZGQoPHN0cmluZz5lZGl0b3IuZG9jdW1lbnQubGFuZ3VhZ2VJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbmZpZy51cGRhdGUoXCJtYXJrZG93bkdyYW1tYXJTY29wZXNcIiwgc2NvcGVzLCB0cnVlKTtcclxuICAgICAgICB2c2NvZGUud2luZG93LnNob3dJbmZvcm1hdGlvbk1lc3NhZ2UoYE1hcmtkb3duIHRhYmxlIGZvcm1hdHRlciBlbmFibGVkIGZvciAnJHtlZGl0b3IuZG9jdW1lbnQubGFuZ3VhZ2VJZH0nIGxhbmd1YWdlIWApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZm9ybWF0T25TYXZlID0gdnNjb2RlLndvcmtzcGFjZS5vbldpbGxTYXZlVGV4dERvY3VtZW50KChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGV2ZW50LmRvY3VtZW50LmZpbGVOYW1lKTtcclxuICAgICAgICBjb25zdCBlZGl0czogdnNjb2RlLlRleHRFZGl0W10gPSBbXTtcclxuXHJcbiAgICAgICAgZXZlbnQud2FpdFVudGlsKG5ldyBQcm9taXNlPHZzY29kZS5UZXh0RWRpdFtdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBlZGl0cy5wdXNoKHZzY29kZS5UZXh0RWRpdC5pbnNlcnQobmV3IHZzY29kZS5Qb3NpdGlvbigwLCAwKSwgYCR7ZXZlbnQuZG9jdW1lbnQudXJpfWApKTtcclxuXHJcbiAgICAgICAgICAgIHJlc29sdmUoZWRpdHMpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRleHQuc3Vic2NyaXB0aW9ucy5wdXNoKGNvbW1hbmRGb3JtYXQpO1xyXG4gICAgY29udGV4dC5zdWJzY3JpcHRpb25zLnB1c2goY29tbWFuZEVuYWJsZSk7XHJcbiAgICBjb250ZXh0LnN1YnNjcmlwdGlvbnMucHVzaChmb3JtYXRPblNhdmUpO1xyXG59XHJcblxyXG4vLyB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB5b3VyIGV4dGVuc2lvbiBpcyBkZWFjdGl2YXRlZFxyXG5leHBvcnQgZnVuY3Rpb24gZGVhY3RpdmF0ZSgpIHtcclxufSJdfQ==