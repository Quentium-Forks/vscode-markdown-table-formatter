"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = require("vscode");
const regex_1 = require("./regex");
const format_table_1 = require("./format-table");
function getSettings() {
    let vscodeConfig = vscode.workspace.getConfiguration('markdown-table-formatter');
    return {
        formatOnSave: vscodeConfig.get('formatOnSave'),
        autoSelectEntireDocument: vscodeConfig.get('autoSelectEntireDocument'),
        spacePadding: vscodeConfig.get('spacePadding'),
        keepFirstAndLastPipes: vscodeConfig.get('keepFirstAndLastPipes'),
        defaultTableJustification: vscodeConfig.get('defaultTableJustification'),
        markdownGrammarScopes: vscodeConfig.get('markdownGrammarScopes'),
        limitLastColumnPadding: vscodeConfig.get('limitLastColumnPadding')
    };
}
class TableFormatter {
    format(editor, force = false) {
        const emptySelection = editor.selections.every(s => s.isEmpty);
        if (!getSettings().markdownGrammarScopes.includes(editor.document.languageId)) {
            return undefined;
        }
        if (force || (emptySelection && getSettings().autoSelectEntireDocument)) {
            let tables = this.tablesIn(editor.document);
            editor.edit(editBuilder => {
                tables.forEach(table => {
                    editBuilder.replace(table.range, format_table_1.formatTable(table.match, getSettings()));
                });
            });
        }
        else {
            let tables = this.tablesIn(editor.document, editor.selections);
            editor.edit(editBuilder => {
                tables.forEach(table => {
                    editBuilder.replace(table.range, format_table_1.formatTable(table.match, getSettings()));
                });
            });
        }
    }
    tablesIn(document, forRanges = []) {
        var items = [];
        if (forRanges.length === 0) {
            const firstLine = document.lineAt(0);
            const lastLine = document.lineAt(document.lineCount - 1);
            const textRange = new vscode.Range(0, firstLine.range.start.character, document.lineCount - 1, lastLine.range.end.character);
            forRanges.push(textRange);
        }
        forRanges.forEach(range => {
            const text = document.getText();
            let match = regex_1.tableRegex.exec(text);
            while (match !== null) {
                if (match) {
                    let start = document.positionAt(match.index);
                    let end = document.positionAt(match.index + match[0].length);
                    let nrange = new vscode.Range(start, end);
                    let r = nrange.intersection(range);
                    if (r) {
                        items.push({ match: match, range: r });
                    }
                }
                match = regex_1.tableRegex.exec(text);
            }
        });
        return items;
    }
}
exports.TableFormatter = TableFormatter;
//# sourceMappingURL=data:application/json;base64,